from telegram import Message, Update
from telegram.ext import (ApplicationBuilder, CallbackQueryHandler,
                          CommandHandler, ContextTypes, MessageHandler,
                          filters)

from credentials import BOT_TOKEN, ChatGPT_TOKEN
from gpt import ChatGptService
from util import (Dialog, default_callback_handler, load_message, load_prompt,
                  send_image, send_text, send_text_buttons, show_main_menu)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    dialog.mode = 'main'
    text = load_message('main')
    await send_response(update, context, 'main', text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì'
    })


async def random(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random.
    """
    dialog.mode = 'random'
    prompt = load_prompt('random')
    message = load_message('random')
    message = await send_response(update, context, 'random', message)

    try:
        answer = await chat_gpt.send_question(prompt, '')
        await message.edit_text(answer)
        buttons = {'random_fact': '–ï—â–µ —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç'}
        await send_text_buttons(
            update, context, '–•–æ—Ç–∏—Ç–µ –µ—â–µ –æ–¥–∏–Ω —Ñ–∞–∫—Ç?', buttons)

    except Exception as e:
        await message.edit_text(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')


async def random_fact(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ï—â–µ —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç".
    """
    await update.callback_query.answer()
    await random(update, context)


async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gpt.
    """
    dialog.mode = 'gpt'
    prompt = load_prompt('gpt')
    chat_gpt.set_prompt(prompt)
    message = load_message('gpt')
    await send_response(update, context, 'gpt', message)


async def gpt_dialog(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞ —Å ChatGPT.
    """
    text = update.message.text
    message = await send_text(update, context, '–î—É–º–∞—é –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º...')

    try:
        answer = await chat_gpt.add_message(text)
        await message.edit_text(answer)
    except Exception as e:
        await message.edit_text(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')


async def send_response(update: Update, context: ContextTypes.DEFAULT_TYPE,
                        image_key: str, text: str) -> Message:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    await send_image(update, context, image_key)
    message = await send_text(update, context, text)
    return message


persons: dict = {
    'Cobain': {
        'prompt': load_prompt('talk_cobain')
    },
    'Hawking': {
        'prompt': load_prompt('talk_hawking')
    },
    'Nietzsche': {
        'prompt': load_prompt('talk_nietzsche')
    },
    'Queen': {
        'prompt': load_prompt('talk_queen')
    },
    'Tolkien': {
        'prompt': load_prompt('talk_tolkien')
    },
}

translate_persons: dict = {
    'Cobain': '–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω',
    'Hawking': '–°—Ç–∏–≤–µ–Ω –•–æ–∫–∏–Ω–≥',
    'Nietzsche': '–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ',
    'Queen': '–ï–ª–∏–∑–∞–≤–µ—Ç–∞ II',
    'Tolkien': '–î–∂–æ–Ω –¢–æ–ª–∫–∏–µ–Ω'
}


async def show_persons(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –ª–∏—á–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.
    """
    await send_response(update, context, 'talk', load_message('talk'))
    buttons = {name: translate_persons[name]
               for name in persons.keys()}
    await send_text_buttons(update, context, 'üîç –í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å:', buttons)


async def select_person(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    await update.callback_query.answer()
    person = update.callback_query.data
    context.user_data['person'] = person
    dialog.mode = 'talk'
    await talk_with_person(update, context)


async def talk_with_person(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é.
    """
    person = context.user_data.get('person')

    if person:
        chat_gpt.set_prompt(persons[person]['prompt'])
        image_key = f'talk_{person.lower().replace(" ", "_")}'
        await send_image(update, context, image_key)
        await send_text(
            update, context,
            f'–í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å {translate_persons[person]}. '
            '–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!')
    else:
        await show_persons(update, context)


async def change_personality(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏.
    """
    await update.callback_query.answer()
    await show_persons(update, context)


async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ª–∏—á–Ω–æ—Å—Ç—å—é.
    """
    person = context.user_data.get('person')

    if person:
        user_message = update.message.text
        answer = await chat_gpt.add_message(user_message)
        await send_text(update, context, answer)
        buttons = {'change_personality': '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ª–∏—á–Ω–æ—Å—Ç—å'}
        await send_text_buttons(
            update, context, '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ª–∏—á–Ω–æ—Å—Ç—å?', buttons)
    else:
        await show_persons(update, context)


async def text_handler(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
    """
    if dialog.mode == 'gpt':
        await gpt_dialog(update, context)
    elif dialog.mode == 'talk':
        await talk(update, context)
    else:
        await start(update, context)


dialog = Dialog()
dialog.mode = None
chat_gpt = ChatGptService(ChatGPT_TOKEN)
app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('random', random))
app.add_handler(CommandHandler('gpt', gpt))
app.add_handler(CommandHandler('talk', talk))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
app.add_handler(CallbackQueryHandler(random_fact, pattern='^random_fact$'))
app.add_handler(CallbackQueryHandler(select_person,
                pattern='^(Cobain|Hawking|Nietzsche|Queen|Tolkien)$'))
app.add_handler(CallbackQueryHandler(
    change_personality, pattern='^change_personality$'))
app.add_handler(CallbackQueryHandler(default_callback_handler))
app.run_polling()
