from telegram import Update
from telegram.ext import (ApplicationBuilder, CallbackQueryHandler,
                          CommandHandler, ContextTypes, MessageHandler,
                          filters)

from constants import (CORRECT_ANSWER, PERSONS, QUIZ_BUTTONS,
                       TRANSLATE_PERSONS, TRANSLATE_QUIZ_TOPICS)
from credentials import BOT_TOKEN, ChatGPT_TOKEN
from gpt import ChatGptService
from util import (Dialog, default_callback_handler, load_message, load_prompt,
                  send_html, send_image, send_response, send_text,
                  send_text_buttons, show_main_menu)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    dialog.mode = 'main'
    text: str = load_message('main')
    await send_response(update, context, 'main', text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì'
    })


async def random(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    dialog.mode = 'random'
    prompt: str = load_prompt('random')
    message: str = load_message('random')
    message = await send_response(update, context, 'random', message)

    try:
        answer: str = await chat_gpt.send_question(prompt, '')
        await message.edit_text(answer)
        buttons: dict[str, str] = {'random_fact': '–ï—â–µ —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç'}
        await send_text_buttons(
            update, context, '–•–æ—Ç–∏—Ç–µ –µ—â–µ –æ–¥–∏–Ω —Ñ–∞–∫—Ç?', buttons)

    except Exception as e:
        await message.edit_text(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')


async def random_fact(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ï—â–µ —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç".
    –í—ã–∑—ã–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ random –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–∫—Ç–∞.
    """
    await update.callback_query.answer()
    await random(update, context)


async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gpt.
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –±–æ—Ç–∞ –Ω–∞ –æ–±—â–µ–Ω–∏–µ —Å ChatGPT –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
    —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    dialog.mode = 'gpt'
    prompt: str = load_prompt('gpt')
    chat_gpt.set_prompt(prompt)
    message: str = load_message('gpt')
    await send_response(update, context, 'gpt', message)


async def gpt_dialog(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞ —Å ChatGPT.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ChatGPT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    text: str = update.message.text
    message = await send_text(update, context, '–î—É–º–∞—é –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º...')

    try:
        answer: str = await chat_gpt.add_message(text)
        await message.edit_text(answer)
    except Exception as e:
        await message.edit_text(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')


async def show_persons(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –ª–∏—á–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞.
    """
    await send_response(update, context, 'talk', load_message('talk'))
    buttons: dict[str, str] = {name: TRANSLATE_PERSONS[name]
                               for name in PERSONS.keys()}
    await send_text_buttons(update, context, 'üîç –í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å:', buttons)


async def select_person(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –Ω–µ–π.
    """
    await update.callback_query.answer()
    person: str = update.callback_query.data
    context.user_data['person'] = person
    dialog.mode = 'talk'
    await talk_with_person(update, context)


async def talk_with_person(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É—é—â–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ
    –Ω–∞—á–∞–ª–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.
    """
    person: str = context.user_data.get('person')

    if person:
        chat_gpt.set_prompt(PERSONS[person]['prompt'])
        image: str = f'talk_{person.lower().replace(" ", "_")}'
        await send_image(update, context, image)
        await send_text(
            update, context,
            f'–í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å {TRANSLATE_PERSONS[person]}. '
            '–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!')
    else:
        await show_persons(update, context)


async def change_person(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞.
    """
    await update.callback_query.answer()
    await show_persons(update, context)


async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ª–∏—á–Ω–æ—Å—Ç—å—é.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ª–∏—á–Ω–æ—Å—Ç—å.
    """
    person: str = context.user_data.get('person')

    if person:
        user_message: str = update.message.text
        answer: str = await chat_gpt.add_message(user_message)
        await send_text(update, context, answer)
        buttons: dict[str, str] = {'change_person': '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ª–∏—á–Ω–æ—Å—Ç—å'}
        await send_text_buttons(
            update, context, '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ª–∏—á–Ω–æ—Å—Ç—å?', buttons)
    else:
        await show_persons(update, context)


async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quiz.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∫–≤–∏–∑–∞.
    """
    dialog.mode = 'quiz'
    await send_response(update, context, 'quiz', load_message('quiz'))
    await send_text_buttons(update, context, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:', QUIZ_BUTTONS)


async def quiz_topic_selected(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã –∫–≤–∏–∑–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ –Ω–µ–π.
    """
    await update.callback_query.answer()
    chat_gpt.set_prompt(load_prompt('quiz'))
    user_message: str = update.callback_query.data
    context.user_data['quiz_topic'] = user_message
    context.user_data['correct_answers'] = 0
    answer: str = await chat_gpt.add_message(user_message)
    await send_html(update, context, answer)


async def handle_quiz_answer(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    user_answer: str = (
        update.message.text if update.message else update.callback_query.data
    )
    if user_answer:
        answer: str = await chat_gpt.add_message(user_answer)
        if answer == CORRECT_ANSWER:
            context.user_data['correct_answers'] += 1
        await send_html(update, context, answer)
        current_score: int = context.user_data.get('correct_answers', 0)
        topic_key: str = context.user_data.get('quiz_topic')
        current_topic: str = TRANSLATE_QUIZ_TOPICS.get(topic_key)
        await send_html(
            update, context,
            f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —Ç–µ–º–µ {current_topic}: {current_score}')
        buttons: dict[str, str] = {'quiz_more': '–ó–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å',
                                   'change_quiz_topic': '–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –∫–≤–∏–∑–∞'}
        await send_text_buttons(
            update, context, '–•–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–º–µ–Ω–∏—Ç—å —Ç–µ–º—É?',
            buttons)


async def change_quiz_topic(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –∫–≤–∏–∑–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º –¥–ª—è –≤—ã–±–æ—Ä–∞.
    """
    await update.callback_query.answer()
    await send_text_buttons(
        update, context, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É:', QUIZ_BUTTONS)


async def quiz_more(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –µ—â—ë –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ –∫–≤–∏–∑–∞.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """

    await update.callback_query.answer()
    topic: str = context.user_data.get('quiz_topic')
    if topic:
        question: str = f"–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ {topic}."
        answer: str = await chat_gpt.add_message(question)
        await send_html(update, context, answer)
    else:
        await send_text_buttons(
            update, context, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:', QUIZ_BUTTONS)


async def text_handler(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
    """
    if dialog.mode == 'gpt':
        await gpt_dialog(update, context)
    elif dialog.mode == 'talk':
        await talk(update, context)
    elif dialog.mode == 'quiz':
        await handle_quiz_answer(update, context)
    else:
        await start(update, context)


dialog: Dialog = Dialog()
dialog.mode = None
chat_gpt: ChatGptService = ChatGptService(ChatGPT_TOKEN)
app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('random', random))
app.add_handler(CommandHandler('gpt', gpt))
app.add_handler(CommandHandler('talk', talk))
app.add_handler(CommandHandler('quiz', quiz))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
app.add_handler(CallbackQueryHandler(random_fact, pattern='^random_fact$'))
app.add_handler(CallbackQueryHandler(
    select_person, pattern='^(Cobain|Hawking|Nietzsche|Queen|Tolkien)$'))
app.add_handler(CallbackQueryHandler(
    change_person, pattern='^change_person$'))
app.add_handler(CallbackQueryHandler(
    quiz_topic_selected, pattern='^(quiz_prog|quiz_math|quiz_biology)$'))
app.add_handler(CallbackQueryHandler(quiz_more, pattern='^quiz_more$'))
app.add_handler(CallbackQueryHandler(
    change_quiz_topic, pattern='^change_quiz_topic$'))
app.add_handler(CallbackQueryHandler(default_callback_handler))
app.run_polling()
